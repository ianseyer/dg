diff --git a/Procfile b/Procfile
index 255a64e..1787749 100644
--- a/Procfile
+++ b/Procfile
@@ -1 +1 @@
-web: node server/server.js
+web: slc run
diff --git a/common/helpers/subscription.js b/common/helpers/subscription.js
index 47d0658..1db2219 100644
--- a/common/helpers/subscription.js
+++ b/common/helpers/subscription.js
@@ -1,60 +1,8 @@
 /**
-This file handles subscription events, such as mailing and logic
-When a new entry is created, and a user needs to be able to read it
-(e.g. it was public for a cause they have donated to, or is a Story for them),
-we need to email users telling them they have some new content to look at.
+This file handles subscription mail events.
+When a new entry is created, and is a recurring entry
+we need to email users telling them they have some new content to look at
 */
+var mcapi = require('../../node_modules/mailchimp-api/mailchimp');

-module.exports = function(app){
-  /** Assigns a piece of content to a user
-  @param [Object] User
-  @param [String] Campaign - the name of the campaign
-  @param [String] Space - the name of the Space
-  */
-  var assignContent = function(user, campaignName, spaceName){
-    //locate a piece of unused content
-    Q.fcall(contentfulClient.getSpace(spaceName))
-      .then(function(space){
-        //grab the campaign
-        return space.getEntry({"content_type":"campaign", "fields.name":campaignName})
-      })
-      .then(function(campaign){
-        return space.getEntries({"content_type":"story",   "fields.campaign.sys.id":campaign.sys.id, "used":false})
-        console.log("retrieved entries: " + entries)
-      })
-      .then(function(entries){
-        //assign the user the first piece of content
-        contentSlice = entries[0];
-        if (contentSlice == null || campaignName == null){
-          throw new Error("Missing Campaign name, or worse: out of content!");
-        }
-        else {
-          //add the content to that users content,
-          user.content.push(contentSlice);
-          //and add the campaign to their causes
-          user.causes.push(campaignName);
-          //mark the content as used
-          contentSlice.used = true
-          //push changes to contentful
-          space.updateEntry(contentSlice)
-        }
-      })
-      .catch(function(error){cb(error)});
-  }
-
-  /** Sends an email to a user about a new piece of content to view.
-  @param [Object] User - the user
-  @param [Object] Entry - the contentful entry in question
-  and notifies them via mailchimp of a new piece of content.
-  */
-  var notifyUser = function(user, entry){
-    //do email shit
-    Q.fcall(user.app.models.Email.send({
-      from: "support@directgiving.com",
-      to: user.email,
-      subject: "There's a new story to read!",
-      text: entry
-    }))
-    .catch(function(error){cb(error)});
-  };
-};
+var mailchimp = new mcapi.Mailchimp('');
diff --git a/common/models/user-acls.json b/common/models/user-acls.json
index a846bc9..e826eb9 100644
--- a/common/models/user-acls.json
+++ b/common/models/user-acls.json
@@ -1,9 +1,6 @@
-{
-  "acls":
-    [{
-      "accessType": "*",
-      "principalType": "ROLE",
-      "principalId": "$everyone",
-      "permission": "ALLOW"
-    }]
-}
+acls = [{
+  "accessType": "*",
+  "principalType": "ROLE",
+  "principalId": "$everyone",
+  "permission": "ALLOW"
+}]
diff --git a/common/models/user.js b/common/models/user.js
index a2af8fc..3e45806 100644
--- a/common/models/user.js
+++ b/common/models/user.js
@@ -1,64 +1,9 @@
-var config = require('../../server/config.json');
-var path = require('path');
 var clearACLs = require('./clearacl.js');
 var stripe = require("stripe")(
-  process.env.STRIPE_SECRET_KEY
+  process.env.SECRET_KEY
 );
 var Q = require('q');
 var percentageFee = .1;
-var subscription = require('../helpers/subscription.js');
-
-/* email verification & password reset */
-module.exports = function(user) {
-  //send verification email after registration
-  user.afterRemote('create', function(context, user) {
-    console.log('> user.afterRemote triggered');
-
-    var options = {
-      type: 'email',
-      to: user.email,
-      from: 'support@directgiving.com',
-      subject: 'Thanks for registering.',
-      template: path.resolve(__dirname, '../../server/views/verify_email.ejs'),
-      redirect: '/verified',
-      user: user
-    };
-
-    user.verify(options, function(err, response) {
-      if (err) {
-        next(err);
-        return;
-      }
-
-      console.log('> verification email sent:', response);
-
-      context.res.render('response', {
-        title: 'Signed up successfully',
-        content: 'Please check your email and click on the verification link '
-          + 'before logging in.',
-        redirectTo: '/',
-        redirectToLinkText: 'Log in'
-      });
-    });
-  });
-
-  //send password reset link when requested
-  user.on('resetPasswordRequest', function(info) {
-    var url = 'http://' + config.host + ':' + config.port + '/reset-password';
-    var html = 'Click <a href="' + url + '?access_token=' + info.accessToken.id
-      + '">here</a> to reset your password';
-
-    user.app.models.Email.send({
-      to: info.email,
-      from: info.email,
-      subject: 'Password reset',
-      html: html
-    }, function(err) {
-      if (err) return console.log('> error sending password reset email');
-      console.log('> sending password reset email to:', info.email);
-    });
-  });
-};

 module.exports = function(user) {
   //remove the ACLs inherited from LBs built into User function
@@ -84,32 +29,57 @@ module.exports = function(user) {
   */
   user.observe('before save', function(ctx, next) {
     //CREATE
+    console.log(ctx.instance);
     newUser = ctx.instance;
-    if (newUser != null && ctx.isNewInstance == true) {
+    if (newUser && ctx.isNewInstance) {
       //Stripe function stack
       var createCustomer = function(){
-        return stripe.customers.create({
+        stripe.customers.create({
           description: newUser.email,
-          source: newUser.stripeToken //obtained with stripe.js
+          source: newUser.stripeToken.id //obtained with stripe.js
         })
       };

       var storeStripeId = function(customer){
-        console.log("WE ARE HERE");
-        console.log(customer.id);
-        console.log("ctx.data: "+ctx.data)
-        ctx.instance.stripeId = customer.id;
-        ctx.instance.content = ["7eYtnbtLMW8wMoseOyaoAw"];
+        newUser.stripeId = customer.id;
       };

+      //Content assignment function stack
+      var assignContent = function(){
+        //locate a piece of unused content
+        space = contentfulClient.getEntry(newUser.campaignName)
+          .then(function(space){
+            //grab all unusued entries from the campaign being donated to
+            return space.getEntries({"content_type":"campaign",   "name":newUser.campaignName, "used":false})
+          })
+          .then(function(entries){
+            //assign the user the first piece of content
+            contentSlice = entries[0];
+            if (!contentSlice || !campaignName){
+              cb(new Error("Missing Campaign name, or worse: out of content!"))
+            }
+            else {
+              //add the content to that users content,
+              newUser.content.push(contentSlice);
+              //and add the campaign to their causes
+              newUser.causes.push(campaignName);
+              //mark the content as used
+              contentSlice.used = true
+              //push changes to contentful
+              space.updateEntry(contentSlice)
+            }
+          });
+      });
+
       //execute function stack
-      createCustomer()
+      Q.fcall(createCustomer())
         .then(storeStripeId)
-        .finally(next)
-        .catch(function(error){throw error});
+        .then(assignContent())
+        .catch(function(){cb(error)});
     } else {
       //UPDATE method called
     }
+    next();
   });

   /**
@@ -118,57 +88,35 @@ module.exports = function(user) {
   *@param {int} id - id of the user, to be passed in the url
   *@param {int} amount - in cents!
   *@param {string} campaignName - the Contentful name of the cause
-  *
   */
-  user.donate = function(token, id, amount, campaignName, spaceName, cb){
-    var chargeStripe = function(donatingUser, campaign) {
-      return stripe.charges.create({
-            amount: amount,
-            currency: "usd",
-            customer: donatingUser.stripeId,
-            description: donatingUser.email,
-            destination: campaign.stripeId,
-            application_fee: amount * percentageFee //solid math!
-      });
+  user.donate = function(token, id, amount, causeId, cb){
+    var chargeStripe = function(donatingUser) {
+        return stripe.charges.create({
+              amount: amount,
+              currency: "usd",
+              customer: donatingUser.stripeId,
+              description: donatingUser.email,
+              destination:
+                contentfulClient.getEntry(campaignName)
+                .then(function(entry){
+                  entry.stripeId
+                })
+                .catch(handleErrors),
+              application_fee: amount * percentageFee //solid math!
+        });
     };
-
     var chargeSuccess = function(successMessage) {
             donatingUser.causes.push(causeId);
             cb(null, successMessage);
     };
-
-    var assignContent = function(){
-      subscription.assignContent(donatingUser, campaignName, spaceName)
-    };
-
     var handleErrors = function(err) {
             cb(err);
     };

-    //Execute our promise stack
-    var handleDonation = User.findById(id)
-      .then(function(user){
-        contentfulClient.getEntry(campaignName)
-          .then(function(entry){
-            chargeStripe(user, entry)
-            .then(chargeSuccess())
-            .then(assignContent())
-          })
-      })
-      .catch(handleErrors());
+    Q.fcall(User.findById(id))
+      .then(Cause.findById(causeId))
+      .then(chargeStripe)
+      .then(chargeSuccess)
+      .catch(handleErrors);
   }
-
-  user.remoteMethod(
-    'donate',
-    {
-      accepts: [
-        {arg: 'token'},
-        {arg: 'id'},
-        {arg: 'amount'},
-        {arg: 'campaignName'},
-        {arg: 'spaceName'}
-      ],
-      http: {path: '/users/:id/donate', verb: 'post'}
-    }
-  )
 };
diff --git a/common/models/user.json b/common/models/user.json
index 2caaf47..45ca903 100644
--- a/common/models/user.json
+++ b/common/models/user.json
@@ -9,9 +9,6 @@
     "causes":{
       "type":["String"]
     },
-    "content":{
-      "type":["String"]
-    },
     "stripeId":{
       "type":"String"
     }
diff --git a/server/boot/auto-migrate.js b/server/boot/auto-migrate.js
index c769a64..2a69a41 100644
--- a/server/boot/auto-migrate.js
+++ b/server/boot/auto-migrate.js
@@ -4,7 +4,10 @@ module.exports = function(app) {
   Otherwise, don't do anything!
   note: passing null to isActual and autoupdate performs the function for all models
   */
-  app.dataSources.postgres.autoupdate(function(err, result) {
-    console.log("UPDATED MODELS")
-  });
-}
+  app.dataSources.postgres.isActual(null, function(err, actual) {
+    if (!actual) {
+        app.dataSources.postgres.autoupdate(null, function(err, result) {
+        });
+    }
+});
+};
diff --git a/server/boot/contentful-client.j b/server/boot/contentful-client.j
new file mode 100644
index 0000000..e69de29
diff --git a/server/boot/contentful-client.js b/server/boot/contentful-client.js
index 4bf0d48..c2deb84 100644
--- a/server/boot/contentful-client.js
+++ b/server/boot/contentful-client.js
@@ -1,9 +1,8 @@
 //eventually, make this an environment variable
-var access_token = "27fcf1574c6034393c8e568c903d6351fbf6e6b438ad4d953019b0cb6e882d02";
-var contentful = require('contentful-management');
+var access_token = "27fcf1574c6034393c8e568c903d6351fbf6e6b438ad4d953019b0cb6e882d02"

 module.exports = function(app) {
-  GLOBAL.contentfulClient = contentful.createClient({
+  var global.contentfulClient = contentful.createClient({
     // A valid access token within the Space
     accessToken: access_token,

diff --git a/server/boot/contentfulHook.js b/server/boot/contentfulHook.js
index 20f19fb..8f3a614 100644
--- a/server/boot/contentfulHook.js
+++ b/server/boot/contentfulHook.js
@@ -9,128 +9,32 @@
 *        - email them a link to view the generated DG percentageFee
 * DO NOTICE WE ARE USING CONTENTFUL MANAGEMENT API, NOT DELIVERY API
 */
+var contentful = require('contentful-management');
 var stripe = require('stripe');
-var subscription = require('../../common/helpers/subscription.js');
+var subscription = require('common/helpers/subscription.js');

 module.exports = function(app) {
   app.get('/contentful-hook', function(req, res){
-    /**
+    /** TODO
     If an entry has been published, there are a few scenarios:
       * the entry is marked "send to all users" (e.g. an update)
-        then grab all users who have donated to that campaign,
-        attach the content to them, and notify them!
+        then grab all users who have donated to that campaign
       * the entry is a single-user piece of content
-        then grab a user that is susbcribed to the campaign, but has no content from that campaign
-        then find a piece of content that is unusued
-        assign it to them and notify them

-    If a contentype has been published,
-      * create a stripe account for that campaign
-      * mark the stripeID into contentful
+    otherwise,
     */

-    //An Entry was published
-    if(req.headers['X-Contentful-Topic'] == 'ContentManagement.Entry.publish' && entry.contentType.sys.id == "story"){
-      entry = req.body;
-
-      //Grab the story's campaign, and add the story to the campaign
-      // Q.fcall(contentfulClient.getSpace(entry.space.id))
-      //   .then(function(space){
-      //     return space.getEntry(entry.fields.campaign.id)
-      //   })
-      //   .then(function(campaign){
-      //     campaign.fields.entries.push(entry);
-      //     space.updateEntry(campaign);
-      //   })
-      //   .catch(function(error){cb(error)});
-
-      //If the story was marked as public
-      if(entry.fields.public == true){
-        //assign the entry to all users
-        /*NOTE sadly, loopback does not support a "contains" filter.
-         *therefore, we are going to filter ourselves.
-         *I have opened a question on the google group asking about it:
-         *https://groups.google.com/forum/#!topic/strongloop/zczeyo7biII
-        */
-        Q.fcall(User.find()) //returns all users (*shudder*)
-          .then(function(allUsers){
-            for(user in allUsers){
-              if (user.causes.indexOf(entry.fields.campaign.id) != -1){
-                //the users causes DID contain the cause that triggered the hook
-                //notify them
-                //add the entry ID to their list of content
-                user.content.push(entry.id);
-                user.save;
-                //notify them
-                subscription.notifyUser(user, entry)
-              }
-              else {
-                //do nothing!
-              };
-            };
-          })
-          .catch(function(error){cb(error)});
-      }
-      else{
-        //the content is NOT public
-        var space = Q.fcall(contentfulClient.getSpace(entry.space.sys.id))
-                      .catch(function(error){cb(error)});
-
-        //find a user who is both subscribed and doesn't have content
-        //from that campaign
-        Q.fcall(User.find()) //returns all users (*shudder*)
-          .then(function(allUsers){
-            for(user in allUsers){
-              if (user.causes.indexOf(entry.fields.campaign.id) != -1){
-                //the users causes DOES contain the cause that triggered the hook
-                //grab all their content, see if they have any stories from this campaign
-                usersInNeedOfContent = allUsers;
-                for(entryId in user.content){
-                  var found = false;
-                  Q.fcall(space.getEntry(entryId))
-                    .then(function(userEntry){
-                      if(entry.fields.campaign.sys.id == userEntry.fields.campaign.sys.id){
-                        //the user has content from this campaign,
-                        //remove the user from the list of potential users
-                        usersInNeedOfContent.remove(user);
-                      }
-                      return usersInNeedOfContent;
-                    })
-                    .then(function(pool){
-                      return User.find(pool[0].id)
-                    })
-                    .then(function(user){
-                      user.content.push(entry.id);
-                      user.save;
-                      found = true;
-                       //stop searching! we have found our mark
-                    })
-                    .catch(function(error){cb(error)});
-                  if(found == true){
-                    break;
-                  }
-                }
-              }
-              else {
-                //do nothing!
-              };
-            };
-          })
-          .catch(function(error){cb(error)});
-      };
+    if(req.headers['X-Contentful-Topic'] == 'ContentManagement.Entry.publish'){
+      var subscribedUsers = User.find({
+        where: {causes: {inq: }}
+      })
     }
+    elseif(req.headers['X-Contentful-Topic'] ==
+      'ContentManagement.ContentType.publish'){
+        //create a stripe account
+        stripe.customers.create()
+        //push that stripe account to contentful

-    //A Campaign was published
-    if(req.headers['X-Contentful-Topic'] == 'ContentManagement.Entry.publish' && entry.contentType.sys.id == "campaign"){
-      //create a stripe account
-      Q.fcall(stripe.customers.create({
-        description: entry.fields.name,
-        email: entry.fields.email
-      }))
-      .then(function(customer){
-        entry.fields.stripeId = customer.id
-        contentfulClient.updateEntry(entry);
-      });
-    }
+      }
   });
 }
diff --git a/server/datasources.json b/server/datasources.json
index 3fcb901..ba76ba4 100755
--- a/server/datasources.json
+++ b/server/datasources.json
@@ -1,25 +1,9 @@
 {
   "postgres": {
-    "url": "postgres://wkbtczassdprxn:ITRkrdASPl7ZSHDy6K8yj6KQGP@ec2-54-235-134-128.compute-1.amazonaws.com:5432/dfhhva2mgfodku?ssl=true&sslmode=require",
+    "url": "postgres://wkbtczassdprxn:ITRkrdASPl7ZSHDy6K8yj6KQGP@ec2-54-235-134-128.compute-1.amazonaws.com:5432/dfhhva2mgfodku&ssl=true",
     "name": "postgres",
     "connector": "postgresql",
     "ssl": true,
     "debug": true
-  },
-  "email": {
-       "connector": "mail",
-       "transports": [{
-         "type": "smtp",
-         "host": "smtp.gmail.com",
-         "secure": true,
-         "port": 465,
-         "tls": {
-           "rejectUnauthorized": false
-         },
-         "auth": {
-           "user": "directgivingtest@gmail.com",
-           "pass": "F88aloquick!"
-         }
-       }]
-    }
+  }
 }
diff --git a/server/model-config.json b/server/model-config.json
index ac017cc..22e441c 100755
--- a/server/model-config.json
+++ b/server/model-config.json
@@ -13,8 +13,9 @@
       "./mixins"
     ]
   },
-  "Email": {
-    "dataSource":"email"
+  "User": {
+    "dataSource": "postgres",
+    "public": false
   },
   "AccessToken": {
     "dataSource": "postgres",
diff --git a/server/views/verify_email.ejs b/server/views/verify_email.ejs
index b0b51b3..01b01e3 100644
--- a/server/views/verify_email.ejs
+++ b/server/views/verify_email.ejs
@@ -1 +1 @@
-<%= text %>
+<strong><%= text %></strong>
