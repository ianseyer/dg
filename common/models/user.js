var clearACLs = require('./clearacl.js');
var stripe = require("stripe")(
  process.env.SECRET_KEY
);
var Q = require('q');
var percentageFee = .1;

module.exports = function(user) {
  //remove the ACLs inherited from LBs built into User function
  clearACLs.clearBaseACLs(user, require('./user-acls.json'));

  /**
  * Before save hook.
  * on CREATE:
  *   1. Create a stripe customer and store the id in user.stripeId
  *       by injecting the token returned by stripe.js into the ctx object
  *       Then we parse the typical CREATE with next()
  *   2. Slice them a piece of content-cake
  *
  * on UPDATE:
  *   nothing as of yet
  */

  /**
    Custom user PUT and UPDATE request middleware.
    @param [String] campaignName
    @param [Object] stripeToken
    @param [Object] typical User info
  */
  user.observe('before save', function(ctx, next) {
    //CREATE
    console.log(ctx.instance);
    newUser = ctx.instance;
    if (newUser && ctx.isNewInstance) {
      //Stripe function stack
      var createCustomer = function(){
        stripe.customers.create({
          description: newUser.email,
          source: newUser.stripeToken.id //obtained with stripe.js
        })
      };

      var storeStripeId = function(customer){
        newUser.stripeId = customer.id;
      };

      //Content assignment function stack
      var assignContent = function(){
        //locate a piece of unused content
        space = contentfulClient.getEntry(newUser.campaignName)
          .then(function(space){
            //grab all unusued entries from the campaign being donated to
            return space.getEntries({"content_type":"campaign",   "name":newUser.campaignName, "used":false})
          })
          .then(function(entries){
            //assign the user the first piece of content
            contentSlice = entries[0];
            if (!contentSlice || !campaignName){
              cb(new Error("Missing Campaign name, or worse: out of content!"))
            }
            else {
              //add the content to that users content,
              newUser.content.push(contentSlice);
              //and add the campaign to their causes
              newUser.causes.push(campaignName);
              //mark the content as used
              contentSlice.used = true
              //push changes to contentful
              space.updateEntry(contentSlice)
            }
          });
      });

      //execute function stack
      Q.fcall(createCustomer())
        .then(storeStripeId)
        .then(assignContent())
        .catch(function(){cb(error)});
    } else {
      //UPDATE method called
    }
    next();
  });

  /**
  *Handles donations
  *@param {string} token - generated by stripe.js
  *@param {int} id - id of the user, to be passed in the url
  *@param {int} amount - in cents!
  *@param {string} campaignName - the Contentful name of the cause
  */
  user.donate = function(token, id, amount, causeId, cb){
    var chargeStripe = function(donatingUser) {
        return stripe.charges.create({
              amount: amount,
              currency: "usd",
              customer: donatingUser.stripeId,
              description: donatingUser.email,
              destination:
                contentfulClient.getEntry(campaignName)
                .then(function(entry){
                  entry.stripeId
                })
                .catch(handleErrors),
              application_fee: amount * percentageFee //solid math!
        });
    };
    var chargeSuccess = function(successMessage) {
            donatingUser.causes.push(causeId);
            cb(null, successMessage);
    };
    var handleErrors = function(err) {
            cb(err);
    };

    Q.fcall(User.findById(id))
      .then(Cause.findById(causeId))
      .then(chargeStripe)
      .then(chargeSuccess)
      .catch(handleErrors);
  }
};
