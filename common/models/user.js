var config = require('../../server/config.json');
var path = require('path');
var stripe = require("stripe")(
  process.env.STRIPE_SECRET_KEY
);
var percentageFee = .1;
var subscription = require('../helpers/subscription.js');
var clearacl = require('../helpers/clearacl.js');

/* email verification & password reset */
module.exports = function(user) {
  //first, clear our ACLs.
  //as described here: https://github.com/strongloop/loopback/issues/559
  clearacl.clearBaseACLs(user, require('./user.json'));

  //send verification email after registration
  user.afterRemote('create', function(context, user) {
    console.log('> user.afterRemote triggered');

    var options = {
      type: 'email',
      to: user.email,
      from: 'support@directgiving.com',
      subject: 'Thanks for registering.',
      template: path.resolve(__dirname, '../../server/views/verify_email.ejs'),
      redirect: '/verified',
      user: user
    };

    user.verify(options, function(err, response) {
      if (err) {
        next(err);
        return;
      }

      console.log('> verification email sent:', response);

      context.res.render('response', {
        title: 'Signed up successfully',
        content: 'Please check your email and click on the verification link '
          + 'before logging in.',
        redirectTo: '/',
        redirectToLinkText: 'Log in'
      });
    });
  });

  //send password reset link when requested
  user.on('resetPasswordRequest', function(info) {
    var url = 'http://' + config.host + ':' + config.port + '/reset-password';
    var html = 'Click <a href="' + url + '?access_token=' + info.accessToken.id
      + '">here</a> to reset your password';

    user.app.models.Email.send({
      to: info.email,
      from: info.email,
      subject: 'Password reset',
      html: html
    }, function(err) {
      if (err) return console.log('> error sending password reset email');
      console.log('> sending password reset email to:', info.email);
    });
  });
};

module.exports = function(user) {
  /**
  * Before save hook.
  * on CREATE:
  *   1. Create a stripe customer and store the id in user.stripeId
  *       by injecting the token returned by stripe.js into the ctx object
  *       Then we parse the typical CREATE with next()
  *   2. Slice them a piece of content-cake
  *
  * on UPDATE:
  *   nothing as of yet
  */

  /**
    Custom user PUT and UPDATE request middleware.
    @param [String] campaignName
    @param [Object] stripeToken
    @param [Object] typical User info
  */
  user.observe('before save', function(ctx, next) {
    //CREATE
    newUser = ctx.instance;
    if (newUser != null && ctx.isNewInstance == true) {
      //Stripe function stack
      var createCustomer = function(){
        return stripe.customers.create({
          description: newUser.email,
          source: newUser.stripeToken //obtained with stripe.js
        })
      };

      var storeStripeId = function(customer){
        console.log("WE ARE HERE");
        console.log(customer.id);
        console.log("ctx.data: "+ctx.data)
        ctx.instance.stripeId = customer.id;
        ctx.instance.content = ["7eYtnbtLMW8wMoseOyaoAw"];
      };

      //execute function stack
      createCustomer()
        .then(storeStripeId)
        .finally(next)
        .catch(function(error){throw error});
    } else {
      //UPDATE method called
    }
  });

  /**
  *Handles donations
  *@param {string} token - generated by stripe.js
  *@param {int} id - id of the user, to be passed in the url
  *@param {int} amount - in cents!
  *@param {string} campaignName - the Contentful name of the cause
  *
  */
  user.donate = function(token, id, amount, campaignName, spaceName, cb){
    var chargeStripe = function(donatingUser, campaign) {
      return stripe.charges.create({
            amount: amount,
            currency: "usd",
            customer: donatingUser.stripeId,
            description: donatingUser.email,
            destination: campaign.stripeId,
            application_fee: amount * percentageFee //solid math!
      });
    };

    var chargeSuccess = function(successMessage) {
            donatingUser.causes.push(causeId);
            cb(null, successMessage);
    };

    var assignContent = function(){
      subscription.assignContent(donatingUser, campaignName, spaceName)
    };

    var handleErrors = function(err) {
            cb(err);
    };

    //Execute our promise stack
    var handleDonation = User.findById(id)
      .then(function(user){
        contentfulClient.getEntry(campaignName)
          .then(function(entry){
            chargeStripe(user, entry)
            .then(chargeSuccess())
            .then(assignContent())
          })
      })
      .catch(handleErrors());
  }

  user.remoteMethod(
    'donate',
    {
      accepts: [
        {arg: 'token'},
        {arg: 'id'},
        {arg: 'amount'},
        {arg: 'campaignName'},
        {arg: 'spaceName'}
      ],
      http: {path: '/users/:id/donate', verb: 'post'}
    }
  )
};
